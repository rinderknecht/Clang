using
Ident(System)
;
namespace
Ident(Cortus)
.
Ident(TestSuite)
{
class
Ident(Arrays)
{
static
int
Ident(all)
=
Int(0)
;
static
int
Ident(passed)
=
Int(0)
;
static
void
Ident(Test)
(
bool
Ident(ok)
,
string
Ident(name)
)
{
Ident(all)
++
;
if
(
Ident(ok)
)
{
Ident(System)
.
Ident(Console)
.
Ident(Write)
(
String("Y  : ")
)
;
Ident(passed)
++
;
}
else
{
Ident(System)
.
Ident(Console)
.
Ident(Write)
(
String("  N: ")
)
;
}
Ident(System)
.
Ident(Console)
.
Ident(WriteLine)
(
Ident(name)
)
;
}
public
static
void
Ident(Process)
(
)
{
Ident(Test)
(
Ident(test_10_create)
(
)
==
Int(10)
,
String("test_10_create")
)
;
Ident(Test)
(
Ident(test_0_unset_value)
(
)
==
Int(0)
,
String("test_0_unset_value")
)
;
Ident(Test)
(
Ident(test_3_set_value)
(
)
==
Int(3)
,
String("test_3_set_value")
)
;
Ident(Test)
(
Ident(test_0_char_array_1)
(
)
==
Int(0)
,
String("test_0_char_array_1")
)
;
Ident(Test)
(
Ident(test_0_char_array_2)
(
)
==
Int(0)
,
String("test_0_char_array_2")
)
;
Ident(Test)
(
Ident(test_0_char_array_3)
(
)
==
Int(0)
,
String("test_0_char_array_3")
)
;
Ident(Test)
(
Ident(test_0_byte_array)
(
)
==
Int(0)
,
String("test_0_byte_array")
)
;
Ident(Test)
(
Ident(test_0_set_after_shift)
(
)
==
Int(0)
,
String("test_0_set_after_shift")
)
;
Ident(Test)
(
Ident(test_0_newarr_emulation)
(
)
==
Int(0)
,
String("test_0_newarr_emulation")
)
;
Ident(Test)
(
Ident(test_1_bit_index)
(
)
==
Int(1)
,
String("test_1_bit_index")
)
;
Ident(Test)
(
Ident(test_2_regalloc)
(
)
==
Int(2)
,
String("test_2_regalloc")
)
;
Ident(Test)
(
Ident(test_0_stelemref_1)
(
)
==
Int(0)
,
String("test_0_stelemref_1")
)
;
Ident(Test)
(
Ident(test_0_stelemref_2)
(
)
==
Int(0)
,
String("test_0_stelemref_2")
)
;
Ident(Test)
(
Ident(test_0_stelemref_3)
(
)
==
Int(0)
,
String("test_0_stelemref_3")
)
;
Ident(Test)
(
Ident(test_0_stelemref_4)
(
)
==
Int(0)
,
String("test_0_stelemref_4")
)
;
Ident(Test)
(
Ident(test_0_arrays)
(
)
==
Int(0)
,
String("test_0_arrays")
)
;
Ident(Test)
(
Ident(test_0_multi_dimension_arrays)
(
)
==
Int(0)
,
String("test_0_multi_dimension_arrays")
)
;
Ident(Test)
(
Ident(test_0_bug_71454)
(
)
==
Int(0)
,
String("test_0_bug_71454")
)
;
Ident(Test)
(
Ident(test_0_interface_array_cast)
(
)
==
Int(0)
,
String("test_0_interface_array_cast")
)
;
Ident(Test)
(
Ident(test_0_regress_74549)
(
)
==
Int(0)
,
String("test_0_regress_74549")
)
;
Ident(Test)
(
Ident(test_0_regress_75832)
(
)
==
Int(0)
,
String("test_0_regress_75832")
)
;
Ident(Test)
(
Ident(test_0_stelem_ref_null_opt)
(
)
==
Int(0)
,
String("test_0_stelem_ref_null_opt")
)
;
Ident(Test)
(
Ident(test_0_invalid_new_array_size)
(
)
==
Int(0)
,
String("test_0_invalid_new_array_size")
)
;
Ident(Test)
(
Ident(test_0_invalid_new_multi_dym_array_size)
(
)
==
Int(0)
,
String("test_0_invalid_new_multi_dym_array_size")
)
;
if
(
Ident(passed)
==
Int(24)
)
{
Ident(System)
.
Ident(Console)
.
Ident(WriteLine)
(
String("SUCCESS")
)
;
}
else
{
Ident(System)
.
Ident(Console)
.
Ident(WriteLine)
(
String("FAIL")
)
;
}
Ident(Program)
.
Ident(TotalPassed)
+=
Ident(passed)
;
Ident(Program)
.
Ident(TotalFailed)
+=
Int(24)
-
Ident(passed)
;
}
public
static
int
Ident(test_10_create)
(
)
{
int
[
]
Ident(a)
=
new
int
[
Int(10)
]
;
return
Ident(a)
.
Ident(Length)
;
}
public
static
int
Ident(test_0_unset_value)
(
)
{
int
[
]
Ident(a)
=
new
int
[
Int(10)
]
;
return
Ident(a)
[
Int(5)
]
;
}
public
static
int
Ident(test_3_set_value)
(
)
{
int
[
]
Ident(a)
=
new
int
[
Int(10)
]
;
Ident(a)
[
Int(5)
]
=
Int(3)
;
return
Ident(a)
[
Int(5)
]
;
}
public
static
int
Ident(test_0_char_array_1)
(
)
{
int
Ident(value)
=
-
Int(30)
;
char
[
]
Ident(tmp)
=
new
char
[
Int(20)
]
;
char
[
]
Ident(digitLowerTable)
=
new
char
[
Int(16)
]
;
Ident(tmp)
[
Int(0)
]
=
Ident(digitLowerTable)
[
-
(
Ident(value)
%
Int(10)
)
]
;
return
Int(0)
;
}
public
static
int
Ident(test_0_char_array_2)
(
)
{
int
Ident(value)
=
Int(5)
;
char
[
]
Ident(tmp)
=
new
char
[
Int(20)
]
;
char
[
]
Ident(digitLowerTable)
=
new
char
[
Int(16)
]
;
Ident(tmp)
[
Int(0)
]
=
Ident(digitLowerTable)
[
Ident(value)
%
Int(10)
]
;
return
Int(0)
;
}
public
static
int
Ident(test_0_char_array_3)
(
)
{
int
Ident(value)
=
-
Int(1)
;
char
[
]
Ident(tmp)
=
new
char
[
Int(20)
]
;
char
[
]
Ident(digitLowerTable)
=
new
char
[
Int(16)
]
;
Ident(tmp)
[
Int(0)
]
=
Ident(digitLowerTable)
[
Ident(value)
&
Int(15)
]
;
return
Int(0)
;
}
public
unsafe
static
int
Ident(test_0_byte_array)
(
)
{
byte
[
]
Ident(src)
=
new
byte
[
Int(8)
]
;
double
Ident(ret)
;
byte
*
Ident(dst)
=
CAST
(
byte
*
)
&
Ident(ret)
;
int
Ident(start)
=
Int(0)
;
Ident(dst)
[
Int(0)
]
=
Ident(src)
[
Int(4)
+
Ident(start)
]
;
return
Int(0)
;
}
public
static
int
Ident(test_0_set_after_shift)
(
)
{
int
[
]
Ident(n)
=
new
int
[
Int(1)
]
;
int
Ident(b)
=
Int(16)
;
Ident(n)
[
Int(0)
]
=
Int(100)
+
(
Int(1)
<<
(
Int(16)
-
Ident(b)
)
)
;
if
(
Ident(n)
[
Int(0)
]
!=
Int(101)
)
return
Int(1)
;
return
Int(0)
;
}
public
static
int
Ident(test_0_newarr_emulation)
(
)
{
double
Ident(d)
=
Int(500)
;
checked
{
double
[
]
Ident(arr)
=
new
double
[
CAST
(
int
)
Ident(d)
]
;
}
return
Int(0)
;
}
private
Ident(Int32)
[
]
Ident(m_array)
=
new
int
[
Int(10)
]
;
void
Ident(setBit)
(
int
Ident(bitIndex)
,
bool
Ident(value)
)
{
int
Ident(index)
=
Ident(bitIndex)
/
Int(32)
;
int
Ident(shift)
=
Ident(bitIndex)
%
Int(32)
;
Ident(Int32)
Ident(theBit)
=
Int(1)
<<
Ident(shift)
;
if
CAST
(
Ident(value)
)
Ident(m_array)
[
Ident(index)
]
|=
Ident(theBit)
;
else
Ident(m_array)
[
Ident(index)
]
&=
~
Ident(theBit)
;
}
bool
Ident(getBit)
(
int
Ident(bitIndex)
)
{
int
Ident(index)
=
Ident(bitIndex)
/
Int(32)
;
int
Ident(shift)
=
Ident(bitIndex)
%
Int(32)
;
Ident(Int32)
Ident(theBit)
=
Ident(m_array)
[
Ident(index)
]
&
(
Int(1)
<<
Ident(shift)
)
;
return
(
Ident(theBit)
==
Int(0)
)
?
false
:
true
;
}
public
static
int
Ident(test_1_bit_index)
(
)
{
Ident(Arrays)
Ident(t)
=
new
Ident(Arrays)
(
)
;
Ident(t)
.
Ident(setBit)
(
Int(0)
,
true
)
;
Ident(t)
.
Ident(setBit)
(
Int(3)
,
true
)
;
if
(
Ident(t)
.
Ident(getBit)
(
Int(1)
)
)
return
Int(4)
;
if
(
!
Ident(t)
.
Ident(getBit)
(
Int(0)
)
)
return
Int(5)
;
if
(
!
Ident(t)
.
Ident(getBit)
(
Int(3)
)
)
return
Int(6)
;
return
Int(1)
;
}
class
Ident(helper1)
{
int
[
]
Ident(ma)
=
new
int
[
Int(56)
]
;
const
int
Ident(MBIG)
=
int
.
Ident(MaxValue)
;
public
Ident(helper1)
(
)
{
for
(
int
Ident(k)
=
Int(1)
;
Ident(k)
<
Int(5)
;
Ident(k)
++
)
{
for
(
int
Ident(i)
=
Int(1)
;
Ident(i)
<
Int(56)
;
Ident(i)
++
)
{
Ident(ma)
[
Ident(i)
]
-=
Ident(ma)
[
Int(1)
+
(
Ident(i)
+
Int(30)
)
%
Int(55)
]
;
if
(
Ident(ma)
[
Ident(i)
]
<
Int(0)
)
Ident(ma)
[
Ident(i)
]
+=
Ident(MBIG)
;
}
}
}
}
public
static
int
Ident(test_2_regalloc)
(
)
{
Ident(helper1)
Ident(h)
=
new
Ident(helper1)
(
)
;
return
Int(2)
;
}
public
static
int
Ident(test_0_stelemref_1)
(
)
{
object
[
]
Ident(o)
=
new
object
[
Int(1)
]
;
Ident(o)
[
Int(0)
]
=
null
;
return
Int(0)
;
}
public
static
int
Ident(test_0_stelemref_2)
(
)
{
object
[
]
Ident(o)
=
new
object
[
Int(1)
]
;
Ident(o)
[
Int(0)
]
=
Int(1)
;
return
Int(0)
;
}
interface
Ident(IFace)
{
}
class
Ident(Face)
:
Ident(IFace)
{
}
public
static
int
Ident(test_0_stelemref_3)
(
)
{
object
[
]
Ident(o)
=
new
Ident(IFace)
[
Int(1)
]
;
Ident(o)
[
Int(0)
]
=
new
Ident(Face)
(
)
;
return
Int(0)
;
}
public
static
int
Ident(test_0_stelemref_4)
(
)
{
object
[
]
[
]
Ident(o)
=
new
object
[
Int(5)
]
[
]
;
Ident(o)
[
Int(0)
]
=
new
object
[
Int(5)
]
;
return
Int(0)
;
}
struct
Ident(FooStruct)
{
public
int
Ident(i)
;
public
Ident(FooStruct)
(
int
Ident(i)
)
{
this
.
Ident(i)
=
Ident(i)
;
}
}
public
static
int
Ident(test_0_arrays)
(
)
{
int
Ident(sum)
;
byte
[
]
Ident(a1)
=
new
byte
[
Int(10)
]
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(a1)
[
Ident(i)
]
=
CAST
(
byte
)
Ident(i)
;
Ident(sum)
=
Int(0)
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(sum)
+=
Ident(a1)
[
Ident(i)
]
;
if
(
Ident(sum)
!=
Int(45)
)
return
Int(1)
;
sbyte
[
]
Ident(a2)
=
new
sbyte
[
Int(10)
]
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(a2)
[
Ident(i)
]
=
CAST
(
sbyte
)
Ident(i)
;
Ident(sum)
=
Int(0)
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(sum)
+=
Ident(a2)
[
Ident(i)
]
;
if
(
Ident(sum)
!=
Int(45)
)
return
Int(2)
;
short
[
]
Ident(a3)
=
new
short
[
Int(10)
]
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(a3)
[
Ident(i)
]
=
CAST
(
short
)
Ident(i)
;
Ident(sum)
=
Int(0)
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(sum)
+=
Ident(a3)
[
Ident(i)
]
;
if
(
Ident(sum)
!=
Int(45)
)
return
Int(3)
;
ushort
[
]
Ident(a4)
=
new
ushort
[
Int(10)
]
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(a4)
[
Ident(i)
]
=
CAST
(
ushort
)
Ident(i)
;
Ident(sum)
=
Int(0)
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(sum)
+=
Ident(a4)
[
Ident(i)
]
;
if
(
Ident(sum)
!=
Int(45)
)
return
Int(4)
;
int
[
]
Ident(a5)
=
new
int
[
Int(10)
]
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(a5)
[
Ident(i)
]
=
CAST
(
int
)
Ident(i)
;
Ident(sum)
=
Int(0)
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(sum)
+=
Ident(a5)
[
Ident(i)
]
;
if
(
Ident(sum)
!=
Int(45)
)
return
Int(5)
;
uint
[
]
Ident(a6)
=
new
uint
[
Int(10)
]
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(a6)
[
Ident(i)
]
=
CAST
(
uint
)
Ident(i)
;
Ident(sum)
=
Int(0)
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(sum)
+=
CAST
(
int
)
Ident(a6)
[
Ident(i)
]
;
if
(
Ident(sum)
!=
Int(45)
)
return
Int(6)
;
long
[
]
Ident(a7)
=
new
long
[
Int(10)
]
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(a7)
[
Ident(i)
]
=
Ident(i)
;
Ident(sum)
=
Int(0)
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(sum)
+=
CAST
(
int
)
Ident(a7)
[
Ident(i)
]
;
if
(
Ident(sum)
!=
Int(45)
)
return
Int(7)
;
ulong
[
]
Ident(a8)
=
new
ulong
[
Int(10)
]
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(a8)
[
Ident(i)
]
=
CAST
(
ulong
)
Ident(i)
;
Ident(sum)
=
Int(0)
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(sum)
+=
CAST
(
int
)
Ident(a8)
[
Ident(i)
]
;
if
(
Ident(sum)
!=
Int(45)
)
return
Int(8)
;
float
[
]
Ident(a9)
=
new
float
[
Int(10)
]
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(a9)
[
Ident(i)
]
=
CAST
(
float
)
Ident(i)
;
Ident(sum)
=
Int(0)
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(sum)
+=
CAST
(
int
)
Ident(a9)
[
Ident(i)
]
;
if
(
Ident(sum)
!=
Int(45)
)
return
Int(9)
;
double
[
]
Ident(a10)
=
new
double
[
Int(10)
]
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(a10)
[
Ident(i)
]
=
Ident(i)
;
Ident(sum)
=
Int(0)
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(sum)
+=
CAST
(
int
)
Ident(a10)
[
Ident(i)
]
;
if
(
Ident(sum)
!=
Int(45)
)
return
Int(10)
;
object
[
]
Ident(a11)
=
new
object
[
Int(10)
]
;
object
Ident(o)
=
new
Ident(Object)
(
)
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(a11)
[
Ident(i)
]
=
Ident(o)
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
if
(
Ident(a11)
[
Ident(i)
]
!=
Ident(o)
)
return
Int(11)
;
Ident(FooStruct)
[
]
Ident(a12)
=
new
Ident(FooStruct)
[
Int(10)
]
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(a12)
[
Ident(i)
]
=
new
Ident(FooStruct)
(
Ident(i)
)
;
Ident(sum)
=
Int(0)
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(sum)
+=
Ident(a12)
[
Ident(i)
]
.
Ident(i)
;
if
(
Ident(sum)
!=
Int(45)
)
return
Int(12)
;
return
Int(0)
;
}
public
static
int
Ident(test_0_multi_dimension_arrays)
(
)
{
int
Ident(sum)
;
byte
[
,
]
Ident(a1)
=
new
byte
[
Int(10)
,
Int(10)
]
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(a1)
[
Ident(i)
,
Ident(i)
]
=
CAST
(
byte
)
Ident(i)
;
Ident(sum)
=
Int(0)
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(sum)
+=
Ident(a1)
[
Ident(i)
,
Ident(i)
]
;
if
(
Ident(sum)
!=
Int(45)
)
return
Int(1)
;
sbyte
[
,
]
Ident(a2)
=
new
sbyte
[
Int(10)
,
Int(10)
]
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(a2)
[
Ident(i)
,
Ident(i)
]
=
CAST
(
sbyte
)
Ident(i)
;
Ident(sum)
=
Int(0)
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(sum)
+=
Ident(a2)
[
Ident(i)
,
Ident(i)
]
;
if
(
Ident(sum)
!=
Int(45)
)
return
Int(2)
;
short
[
,
]
Ident(a3)
=
new
short
[
Int(10)
,
Int(10)
]
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(a3)
[
Ident(i)
,
Ident(i)
]
=
CAST
(
short
)
Ident(i)
;
Ident(sum)
=
Int(0)
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(sum)
+=
Ident(a3)
[
Ident(i)
,
Ident(i)
]
;
if
(
Ident(sum)
!=
Int(45)
)
return
Int(3)
;
ushort
[
,
]
Ident(a4)
=
new
ushort
[
Int(10)
,
Int(10)
]
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(a4)
[
Ident(i)
,
Ident(i)
]
=
CAST
(
ushort
)
Ident(i)
;
Ident(sum)
=
Int(0)
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(sum)
+=
Ident(a4)
[
Ident(i)
,
Ident(i)
]
;
if
(
Ident(sum)
!=
Int(45)
)
return
Int(4)
;
int
[
,
]
Ident(a5)
=
new
int
[
Int(10)
,
Int(10)
]
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(a5)
[
Ident(i)
,
Ident(i)
]
=
CAST
(
int
)
Ident(i)
;
Ident(sum)
=
Int(0)
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(sum)
+=
Ident(a5)
[
Ident(i)
,
Ident(i)
]
;
if
(
Ident(sum)
!=
Int(45)
)
return
Int(5)
;
uint
[
,
]
Ident(a6)
=
new
uint
[
Int(10)
,
Int(10)
]
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(a6)
[
Ident(i)
,
Ident(i)
]
=
CAST
(
uint
)
Ident(i)
;
Ident(sum)
=
Int(0)
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(sum)
+=
CAST
(
int
)
Ident(a6)
[
Ident(i)
,
Ident(i)
]
;
if
(
Ident(sum)
!=
Int(45)
)
return
Int(6)
;
long
[
,
]
Ident(a7)
=
new
long
[
Int(10)
,
Int(10)
]
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(a7)
[
Ident(i)
,
Ident(i)
]
=
Ident(i)
;
Ident(sum)
=
Int(0)
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(sum)
+=
CAST
(
int
)
Ident(a7)
[
Ident(i)
,
Ident(i)
]
;
if
(
Ident(sum)
!=
Int(45)
)
return
Int(7)
;
ulong
[
,
]
Ident(a8)
=
new
ulong
[
Int(10)
,
Int(10)
]
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(a8)
[
Ident(i)
,
Ident(i)
]
=
CAST
(
ulong
)
Ident(i)
;
Ident(sum)
=
Int(0)
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(sum)
+=
CAST
(
int
)
Ident(a8)
[
Ident(i)
,
Ident(i)
]
;
if
(
Ident(sum)
!=
Int(45)
)
return
Int(8)
;
float
[
,
]
Ident(a9)
=
new
float
[
Int(10)
,
Int(10)
]
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(a9)
[
Ident(i)
,
Ident(i)
]
=
CAST
(
float
)
Ident(i)
;
Ident(sum)
=
Int(0)
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(sum)
+=
CAST
(
int
)
Ident(a9)
[
Ident(i)
,
Ident(i)
]
;
if
(
Ident(sum)
!=
Int(45)
)
return
Int(9)
;
double
[
,
]
Ident(a10)
=
new
double
[
Int(10)
,
Int(10)
]
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(a10)
[
Ident(i)
,
Ident(i)
]
=
Ident(i)
;
Ident(sum)
=
Int(0)
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(sum)
+=
CAST
(
int
)
Ident(a10)
[
Ident(i)
,
Ident(i)
]
;
if
(
Ident(sum)
!=
Int(45)
)
return
Int(10)
;
object
[
,
]
Ident(a11)
=
new
object
[
Int(10)
,
Int(10)
]
;
object
Ident(o)
=
new
Ident(Object)
(
)
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
Ident(a11)
[
Ident(i)
,
Ident(i)
]
=
Ident(o)
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
if
(
Ident(a11)
[
Ident(i)
,
Ident(i)
]
!=
Ident(o)
)
return
Int(11)
;
Ident(FooStruct)
[
,
]
Ident(a12)
=
new
Ident(FooStruct)
[
Int(10)
,
Int(10)
]
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
for
(
int
Ident(j)
=
Int(0)
;
Ident(j)
<
Int(10)
;
++
Ident(j)
)
{
Ident(a12)
[
Ident(i)
,
Ident(j)
]
=
new
Ident(FooStruct)
(
Ident(i)
+
Ident(j)
)
;
Ident(FooStruct)
Ident(s)
=
new
Ident(FooStruct)
(
Ident(i)
+
Ident(j)
)
;
Ident(a12)
[
Ident(i)
,
Ident(j)
]
=
Ident(s)
;
}
Ident(sum)
=
Int(0)
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(10)
;
++
Ident(i)
)
for
(
int
Ident(j)
=
Int(0)
;
Ident(j)
<
Int(10)
;
++
Ident(j)
)
{
Ident(sum)
+=
Ident(a12)
[
Ident(i)
,
Ident(j)
]
.
Ident(i)
;
Ident(FooStruct)
Ident(s)
=
Ident(a12)
[
Ident(i)
,
Ident(j)
]
;
Ident(sum)
+=
Ident(s)
.
Ident(i)
;
}
if
(
Ident(sum)
!=
Int(1800)
)
return
Int(12)
;
return
Int(0)
;
}
public
static
int
Ident(test_0_bug_71454)
(
)
{
int
[
,
]
Ident(a)
=
new
int
[
Int(4)
,
Int(4)
]
;
int
[
,
]
Ident(b)
=
new
int
[
Int(4)
,
Int(4)
]
;
for
(
int
Ident(i)
=
Int(0)
;
Ident(i)
<
Int(4)
;
++
Ident(i)
)
{
Ident(b)
[
Int(0)
,
Int(0)
]
=
Ident(a)
[
Int(0)
,
Ident(i)
%
Int(4)
]
;
}
return
Int(0)
;
}
public
static
int
Ident(test_0_interface_array_cast)
(
)
{
try
{
object
[
]
Ident(a)
=
new
Ident(ICloneable)
[
Int(2)
]
;
Ident(ICloneable)
[
]
Ident(b)
=
CAST
(
Ident(ICloneable)
[
]
)
Ident(a)
;
}
catch
{
return
Int(1)
;
}
return
Int(0)
;
}
class
Ident(Foo)
{
public
static
Ident(Foo)
[
]
[
]
Ident(foo)
;
}
public
static
int
Ident(test_0_regress_74549)
(
)
{
new
Ident(Foo)
(
)
;
return
Int(0)
;
}
public
static
int
Ident(test_0_regress_75832)
(
)
{
int
[
]
Ident(table)
=
new
int
[
]
{
Int(0)
,
Int(0)
}
;
int
Ident(x)
=
Int(0)
;
int
Ident(temp)
=
-
Int(1)
^
Ident(x)
;
Ident(temp)
=
Int(2)
+
Ident(temp)
;
int
Ident(y)
=
Ident(table)
[
Ident(temp)
]
;
return
Ident(y)
;
}
public
static
int
Ident(test_0_stelem_ref_null_opt)
(
)
{
object
[
]
Ident(arr)
=
new
Ident(Arrays)
[
Int(1)
]
;
Ident(arr)
[
Int(0)
]
=
new
Ident(Arrays)
(
)
;
Ident(arr)
[
Int(0)
]
=
null
;
return
Ident(arr)
[
Int(0)
]
==
null
?
Int(0)
:
Int(1)
;
}
public
static
int
Ident(test_0_invalid_new_array_size)
(
)
{
int
Ident(size)
;
object
Ident(res)
=
null
;
Ident(size)
=
-
Int(1)
;
try
{
Ident(res)
=
new
float
[
Ident(size)
]
;
}
catch
(
Ident(OverflowException)
Ident(e)
)
{
}
catch
(
Ident(Exception)
)
{
return
Int(1)
;
}
if
(
Ident(res)
!=
null
)
return
Int(2)
;
Ident(size)
=
-
Int(2147483648)
;
try
{
Ident(res)
=
new
float
[
Ident(size)
]
;
}
catch
(
Ident(OverflowException)
Ident(e)
)
{
}
catch
(
Ident(Exception)
)
{
return
Int(3)
;
}
if
(
Ident(res)
!=
null
)
return
Int(4)
;
return
Int(0)
;
}
public
static
int
Ident(test_0_multidym_array_with_negative_lower_bound)
(
)
{
int
[
,
]
Ident(x)
=
CAST
(
int
[
,
]
)
Ident(Array)
.
Ident(CreateInstance)
(
typeof
CAST
(
int
)
,
new
int
[
]
{
Int(2)
,
Int(2)
}
,
new
int
[
]
{
-
Int(2)
,
-
Int(3)
}
)
;
if
(
Ident(x)
.
Ident(GetLowerBound)
(
Int(0)
)
!=
-
Int(2)
)
return
Int(1)
;
if
(
Ident(x)
.
Ident(GetLowerBound)
(
Int(1)
)
!=
-
Int(3)
)
return
Int(2)
;
Ident(x)
.
Ident(SetValue)
(
Int(10)
,
new
int
[
]
{
-
Int(2)
,
-
Int(3)
}
)
;
Ident(x)
.
Ident(SetValue)
(
Int(20)
,
new
int
[
]
{
-
Int(2)
,
-
Int(2)
}
)
;
Ident(x)
.
Ident(SetValue)
(
Int(30)
,
new
int
[
]
{
-
Int(1)
,
-
Int(3)
}
)
;
Ident(x)
.
Ident(SetValue)
(
Int(40)
,
new
int
[
]
{
-
Int(1)
,
-
Int(2)
}
)
;
try
{
Ident(x)
.
Ident(SetValue)
(
Int(10)
,
new
int
[
]
{
-
Int(3)
,
-
Int(3)
}
)
;
return
Int(3)
;
}
catch
(
Ident(IndexOutOfRangeException)
)
{
}
try
{
Ident(x)
.
Ident(SetValue)
(
Int(10)
,
new
int
[
]
{
-
Int(2)
,
-
Int(4)
}
)
;
return
Int(4)
;
}
catch
(
Ident(IndexOutOfRangeException)
)
{
}
try
{
Ident(x)
.
Ident(SetValue)
(
Int(10)
,
new
int
[
]
{
Int(0)
,
-
Int(3)
}
)
;
return
Int(5)
;
}
catch
(
Ident(IndexOutOfRangeException)
)
{
}
try
{
Ident(x)
.
Ident(SetValue)
(
Int(10)
,
new
int
[
]
{
-
Int(1)
,
-
Int(1)
}
)
;
return
Int(6)
;
}
catch
(
Ident(IndexOutOfRangeException)
)
{
}
if
(
CAST
(
int
)
Ident(x)
.
Ident(GetValue)
(
new
int
[
]
{
-
Int(2)
,
-
Int(3)
}
)
!=
Int(10)
)
return
Int(7)
;
if
(
CAST
(
int
)
Ident(x)
.
Ident(GetValue)
(
new
int
[
]
{
-
Int(2)
,
-
Int(2)
}
)
!=
Int(20)
)
return
Int(8)
;
if
(
CAST
(
int
)
Ident(x)
.
Ident(GetValue)
(
new
int
[
]
{
-
Int(1)
,
-
Int(3)
}
)
!=
Int(30)
)
return
Int(9)
;
if
(
CAST
(
int
)
Ident(x)
.
Ident(GetValue)
(
new
int
[
]
{
-
Int(1)
,
-
Int(2)
}
)
!=
Int(40)
)
return
Int(10)
;
try
{
Ident(x)
.
Ident(GetValue)
(
new
int
[
]
{
-
Int(3)
,
-
Int(3)
}
)
;
return
Int(11)
;
}
catch
(
Ident(IndexOutOfRangeException)
)
{
}
try
{
Ident(x)
.
Ident(GetValue)
(
new
int
[
]
{
-
Int(2)
,
-
Int(4)
}
)
;
return
Int(12)
;
}
catch
(
Ident(IndexOutOfRangeException)
)
{
}
try
{
Ident(x)
.
Ident(GetValue)
(
new
int
[
]
{
Int(0)
,
-
Int(3)
}
)
;
return
Int(13)
;
}
catch
(
Ident(IndexOutOfRangeException)
)
{
}
try
{
Ident(x)
.
Ident(GetValue)
(
new
int
[
]
{
-
Int(1)
,
-
Int(1)
}
)
;
return
Int(14)
;
}
catch
(
Ident(IndexOutOfRangeException)
)
{
}
return
Int(0)
;
}
public
static
int
Ident(test_0_invalid_new_multi_dym_array_size)
(
)
{
int
Ident(dym_size)
=
Int(1)
;
int
Ident(size)
;
object
Ident(res)
=
null
;
Ident(size)
=
-
Int(1)
;
try
{
Ident(res)
=
new
float
[
Ident(dym_size)
,
Ident(size)
]
;
}
catch
(
Ident(OverflowException)
Ident(e)
)
{
}
catch
(
Ident(Exception)
)
{
return
Int(1)
;
}
if
(
Ident(res)
!=
null
)
return
Int(2)
;
Ident(size)
=
-
Int(2147483648)
;
try
{
Ident(res)
=
new
float
[
Ident(size)
,
Ident(dym_size)
]
;
}
catch
(
Ident(OverflowException)
Ident(e)
)
{
}
catch
(
Ident(Exception)
)
{
return
Int(3)
;
}
if
(
Ident(res)
!=
null
)
return
Int(4)
;
return
Int(0)
;
}
public
static
int
Ident(long_indices)
(
)
{
int
[
]
Ident(arr)
=
new
int
[
Int(10)
]
;
int
[
,
]
Ident(arr2)
=
new
int
[
Int(10)
,
Int(10)
]
;
long
Ident(index)
=
Int(1)
;
Ident(arr)
[
Ident(index)
]
=
Int(5)
;
if
(
Ident(arr)
[
Ident(index)
]
!=
Int(5)
)
return
Int(1)
;
Ident(arr2)
[
Ident(index)
,
Ident(index)
]
=
Int(5)
;
if
(
Ident(arr2)
[
Ident(index)
,
Ident(index)
]
!=
Int(5)
)
return
Int(2)
;
return
Int(0)
;
}
}
}
